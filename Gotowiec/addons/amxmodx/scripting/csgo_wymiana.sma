/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <csgo>
#include <colorchat>

native is_user_logged(id);

new g_iWymieniajacyGracza[33];
new g_iOstatniOferujacyGracza[33];

new g_iIndexOstatniejOferty[33];
new g_iOfertaSkinowGracza[33][2][3];
new g_iOfertaSkrzynekGracza[33][2][2];
new g_iOfertaKluczyGracza[33][2];
new g_iOfertaEuroGracza[33][2];
new bool:g_bBlokadaWymianyGracza[33];

public plugin_init() {
	register_plugin("CSGO Mod: Wymiana", "1.0", "d0naciak.pl");
	
	register_clcmd("say /handel", "cmd_Wymiana");
	register_clcmd("say /wymien", "cmd_Wymiana");
	register_clcmd("say /wymiana", "cmd_Wymiana");
	
	register_clcmd("csgow_WpiszIloscSkinow", "cmd_WpisalIloscSkinow");
	register_clcmd("csgow_WpiszIloscSkrzynek", "cmd_WpisalIloscSkrzynek");
	register_clcmd("csgow_WpiszIloscKluczy", "cmd_WpisalIloscKluczy");
	register_clcmd("csgow_WpiszIloscEuro", "cmd_WpisalIloscEuro");
	
	register_menu("PotwierdzOferteWymiany", MENU_KEY_7|MENU_KEY_8, "PotwierdzOferteWymiany_Handler");
}

public plugin_natives() {
	register_native("csgo_open_trade", "cmd_Wymiana", 1);
}

public client_authorized(id) {
	new szInfo[4];
	get_user_info(id, "_csgodw", szInfo, 3);
	
	if(szInfo[0] == '1') {
		g_bBlokadaWymianyGracza[id] = true;
	} else {
		g_bBlokadaWymianyGracza[id] = false;
	}
}

public client_disconnect(id) {
	g_iWymieniajacyGracza[id] = 0;
}

public cmd_Wymiana(id) {
	if(!is_user_logged(id)) {
		csgo_print_message(id, "Nie jestes zalogowany!");
		return PLUGIN_HANDLED;
	}

	if(g_iWymieniajacyGracza[id]) {
		OfertaWymiany(id);
		return PLUGIN_HANDLED;
	}
	
	new szItem[128], iMenu = menu_create("Handel", "Wymiana_Handler");
	
	menu_additem(iMenu, "Stworz oferte wymiany");
	formatex(szItem, 127, "Blokada wymiany: %s", g_bBlokadaWymianyGracza[id] ? "\rwlaczona" : "\ywylaczona");
	menu_additem(iMenu, szItem);
	menu_display(id, iMenu);
	return PLUGIN_HANDLED;
}

public Wymiana_Handler(id, iMenu, iItem) {
	switch(iItem) {
		case 0: OfertaWymiany(id);
		case 1: {
			g_bBlokadaWymianyGracza[id] = !g_bBlokadaWymianyGracza[id];
			client_cmd(id, "setinfo _csgodw %d", _:g_bBlokadaWymianyGracza[id]);
			set_user_info(id, "_csgodw", g_bBlokadaWymianyGracza[id] ? "1" : "0");
			cmd_Wymiana(id);
		}
	}
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public OfertaWymiany(id) {
	new iTarget = g_iWymieniajacyGracza[id],
	szItem[512], szNick[32], szOferta[512],
	iMenu = menu_create("Oferta wymiany", "OfertaWymiany_Handler");
	
	
	if(!iTarget) {
		formatex(szItem, 255, "Oferta wymiany dla \yBrak \d(kliknij, aby ustawic)");
		menu_additem(iMenu, szItem);
	} else {
		if(!is_user_connected(iTarget)) {
			g_iWymieniajacyGracza[id] = 0;
			csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
			menu_destroy(iMenu);
			return;
		}
			
		get_user_name(iTarget, szNick, 31);
		formatex(szItem, 511, "Oferta wymiany dla \y%s", szNick);
		menu_additem(iMenu, szItem);

		PobierzOferteGracza(id, 0, szOferta, 511);
		formatex(szItem, 511, "Twoja oferta: \r%s", szOferta);
		menu_additem(iMenu, szItem);
		
		PobierzOferteGracza(id, 1, szOferta, 511);
		formatex(szItem, 511, "Oferta \y%s: \r%s", szNick, szOferta);
		menu_additem(iMenu, szItem);
		
		menu_additem(iMenu, "Wyslij oferte wymiany");
		menu_additem(iMenu, "\rUsun oferte wymiany");
		
		menu_setprop(iMenu, MPROP_EXIT, MEXIT_NEVER);
	}
	
	menu_display(id, iMenu)
}

public OfertaWymiany_Handler(id, iMenu, iItem) {
	switch(iItem) {
		case 0: {
			if(g_iWymieniajacyGracza[id]) {
				OfertaWymiany(id);
				csgo_print_message(id, "Nie mozesz zmieniac juz wymieniajacego/ej! Aby to zrobic, stworz nowa oferte wymiany.");
			}
			else {
				WybierzWymieniajacego(id);
			}
		}
		
		case 1: {
			g_iIndexOstatniejOferty[id] = 0;
			ZmienOferte(id);
		}
		
		case 2: {
			g_iIndexOstatniejOferty[id] = 1;
			ZmienOferte(id);
		}
		
		case 3: {
			WyslijOferteWymiany(id);
		}
		
		case 4: {
			g_iWymieniajacyGracza[id] = 0;
			csgo_print_message(id, "Oferta wymiany zostala anulowana.");
		}
	}
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public ZmienOferte(id) {
	new szItem[192], szOferta[128], iIdOferty = g_iIndexOstatniejOferty[id];

	PobierzOferteGracza(id, iIdOferty, szOferta, 127);
	formatex(szItem, 191, "Oferta: \r%s^n\wCo chcesz tutaj zmienic?", szOferta);

	new iMenu = menu_create(szItem, "ZmienOferte_Handler");
	
	menu_additem(iMenu, (g_iOfertaSkinowGracza[id][iIdOferty][0]) ? "Zmien oferte \rSkinow" : "Dodaj do oferty \rSkiny");
	menu_additem(iMenu, (g_iOfertaSkrzynekGracza[id][iIdOferty][0]) ? "Zmien oferte \rSkrzynek" : "Dodaj do oferty \rSkrzynki");
	menu_additem(iMenu, (g_iOfertaKluczyGracza[id][iIdOferty]) ? "Zmien oferte \rKluczy" : "Dodaj do oferty \rKlucze");
	menu_additem(iMenu, (g_iOfertaEuroGracza[id][iIdOferty]) ? "Zmien oferte \rEuro" : "Dodaj do oferty \rEuro");
	
	menu_setprop(iMenu, MPROP_EXITNAME, "Cofnij");
	menu_display(id, iMenu);
}

public ZmienOferte_Handler(id, iMenu, iItem) {
	new iIdOferty = g_iIndexOstatniejOferty[id];

	switch(iItem) {
		case MENU_EXIT: {
			OfertaWymiany(id);
		}
		case 0: {
			g_iOfertaSkinowGracza[id][iIdOferty][0] = g_iOfertaSkinowGracza[id][iIdOferty][1] = g_iOfertaSkinowGracza[id][iIdOferty][2] = 0;
			WybierzBron(id);
		}

		case 1: {
			g_iOfertaSkrzynekGracza[id][iIdOferty][0] = g_iOfertaSkrzynekGracza[id][iIdOferty][1] = 0;
			WybierzSkrzynke(id);
		}

		case 2: {
			g_iOfertaKluczyGracza[id][iIdOferty] = 0;

			client_cmd(id, "messagemode csgow_WpiszIloscKluczy");
			csgo_print_message(id, "Wpisz ile^x03 kluczy^x01 zamierzasz dodac do oferty.");
			csgo_print_message(id, "Wpisz^x03 0^x01 aby usunac oferte, wpisz^x03 999^x01 aby ustawic wszystkie klucze.");
		}
		
		case 3: {
			g_iOfertaEuroGracza[id][iIdOferty] = 0;

			client_cmd(id, "messagemode csgow_WpiszIloscEuro");
			csgo_print_message(id, "Wpisz ile^x03 Euro^x01 zamierzasz dodac do oferty.");
			csgo_print_message(id, "Wpisz^x03 0.00^x01 aby anulowac dodawanie, wpisz^x03 999.99^x01 aby ustawic wszystkie Euro jakie masz.");
		}
	}
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public WybierzBron(id) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return;
	}
	
	new iMenu = menu_create("Wybierz bron:", "WybierzBron_Handler"),
	szNazwaBroni[16], szCswId[4], bool:bMaSkiny, iIloscSkinow;
	
	for(new i = 1; i < 31; i++) {
		iIloscSkinow = csgo_get_skinsnum(i);
		
		if(!iIloscSkinow) {
			continue;
		}
		
		bMaSkiny = false;
		for(new j = 1; j <= iIloscSkinow; j++) {
			if(csgo_get_user_skins(iTarget, i, j)) {
				bMaSkiny = true;
				break;
			}
		}
		
		if(!bMaSkiny) {
			continue;
		}
		
		
		csgo_get_short_weaponname(i, szNazwaBroni, 15);
		num_to_str(i, szCswId, 3);
		
		menu_additem(iMenu, szNazwaBroni, szCswId);
	}
	
	if(!szCswId[0]) {
		csgo_print_message(id, "Brak skinow do zaoferowania!");
		OfertaWymiany(id);
		menu_destroy(iMenu);
	} else {
		menu_setprop(iMenu, MPROP_EXITNAME, "\rUsun oferte skina");
		menu_display(id, iMenu);
	}
}

public WybierzBron_Handler(id, iMenu, iItem) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		menu_destroy(iMenu);
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_CONTINUE;
	}
	
	if(iItem < 0) {
		if(iItem == MENU_EXIT) {
			menu_destroy(iMenu);
			
			OfertaWymiany(id);
		}
		
		return PLUGIN_CONTINUE;
	}
	
	new iAccess, iCb, szCswId[4];
	menu_item_getinfo(iMenu, iItem, iAccess, szCswId, 3, _, _, iCb);
	
	new iNoweMenu = menu_create("Wybierz skina, ktorego chcesz dodac do oferty:", "WybierzSkina_Handler"),
	iCswId = g_iOfertaSkinowGracza[id][iIdOferty][0] = str_to_num(szCswId),
	szSkin[32], szSkinId[4];
	
	for(new i = 1; i <= csgo_get_skinsnum(iCswId); i++) {
		if(csgo_get_user_skins(iTarget, iCswId, i)) {
			num_to_str(i, szSkinId, 3);
			csgo_get_skin_name(iCswId, i, szSkin, 31);
			
			menu_additem(iNoweMenu, szSkin, szSkinId);
		}
	}
	
	if(!szSkinId[0]) {
		g_iOfertaSkinowGracza[id][iIdOferty][0] = 0;

		csgo_print_message(id, "Brak skinow do zaoferowania!");
		OfertaWymiany(id);
	}
	else {
		menu_setprop(iNoweMenu, MPROP_EXIT, MEXIT_NEVER);
		menu_display(id, iNoweMenu);
	}
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public WybierzSkina_Handler(id, iMenu, iItem) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		menu_destroy(iMenu);
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_CONTINUE;
	}
	
	if(iItem < 0) {
		if(iItem == MENU_EXIT) {
			menu_destroy(iMenu);
			g_iOfertaSkinowGracza[id][iIdOferty][0] = 0;
		}
		
		return PLUGIN_CONTINUE;
	}
	
	new iAccess, iCb, szSkinId[4];
	menu_item_getinfo(iMenu, iItem, iAccess, szSkinId, 3, _, _, iCb);

	g_iOfertaSkinowGracza[id][iIdOferty][1] = str_to_num(szSkinId);
	client_cmd(id, "messagemode csgow_WpiszIloscSkinow");

	csgo_print_message(id, "Wpisz, ile skinow chcesz dodac do oferty.");
	csgo_print_message(id, "Wpisz^x03 0^x01 aby anulowac dodawanie skinow, wpisz^x03 999^x01 aby dodac wszystkie skiny.");
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public cmd_WpisalIloscSkinow(id) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_HANDLED;
	}

	new szIloscSkinow[16], iIloscSkinowOferty, iIloscSkinowGracza = csgo_get_user_skins(iTarget, g_iOfertaSkinowGracza[id][iIdOferty][0], g_iOfertaSkinowGracza[id][iIdOferty][1]);
	
	read_argv(1, szIloscSkinow, 15);
	iIloscSkinowOferty = str_to_num(szIloscSkinow);

	if(iIloscSkinowOferty > iIloscSkinowGracza) {
		iIloscSkinowOferty = iIloscSkinowGracza;
	}

	if(iIloscSkinowOferty <= 0) {
		g_iOfertaSkinowGracza[id][iIdOferty][0] = g_iOfertaSkinowGracza[id][iIdOferty][1] = 0;
	} else {
		g_iOfertaSkinowGracza[id][iIdOferty][2] = iIloscSkinowOferty;
	}

	OfertaWymiany(id);
	return PLUGIN_HANDLED;
}

public WybierzSkrzynke(id) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
		
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return;
	}
	
	new iMenu = menu_create("Wybierz skrzynke:", "WybierzSkrzynke_Handler"),
	szNazwa[32], szSkrzynkaId[4];
	
	for(new i = 1; i <= csgo_get_cratesnum(); i++)
	{
		if(!csgo_get_user_crates(iTarget, i))
			continue;
		
		csgo_get_crate_name(i, szNazwa, 31);
		num_to_str(i, szSkrzynkaId, 3);
		
		menu_additem(iMenu, szNazwa, szSkrzynkaId);
	}
	
	if(!szSkrzynkaId[0]) {
		csgo_print_message(id, "Brak skrzynek do zaoferowania!");
		OfertaWymiany(id);
		menu_destroy(iMenu);
	}
	else {
		menu_display(id, iMenu);
	}
}

public WybierzSkrzynke_Handler(id, iMenu, iItem) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		menu_destroy(iMenu);
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_CONTINUE;
	}
	
	if(iItem < 0) {
		if(iItem == MENU_EXIT) {
			menu_destroy(iMenu);
			
			OfertaWymiany(id);
		}
		
		return PLUGIN_CONTINUE;
	}
	
	new iAccess, iCb, szSkrzynkaId[4];
	menu_item_getinfo(iMenu, iItem, iAccess, szSkrzynkaId, 3, _, _, iCb);
	new iSkrzynka = str_to_num(szSkrzynkaId);
	
	g_iOfertaSkrzynekGracza[id][iIdOferty][0] = iSkrzynka;

	client_cmd(id, "messagemode csgow_WpiszIloscSkrzynek");

	csgo_print_message(id, "Wpisz, ile skrzynek chcesz dodac do oferty.");
	csgo_print_message(id, "Wpisz^x03 0^x01 aby anulowac dodawanie skinow, wpisz^x03 999^x01 aby dodac wszystkie skiny.");
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public cmd_WpisalIloscSkrzynek(id) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_HANDLED;
	}

	new szIloscSkrzynek[16], iIloscSkrzynekOferty, iIloscSkrzynekGracza = csgo_get_user_crates(iTarget, g_iOfertaSkrzynekGracza[id][iIdOferty][0]);
	
	read_argv(1, szIloscSkrzynek, 15);
	iIloscSkrzynekOferty = str_to_num(szIloscSkrzynek);

	if(iIloscSkrzynekOferty > iIloscSkrzynekGracza) {
		iIloscSkrzynekOferty = iIloscSkrzynekGracza;
	}

	if(iIloscSkrzynekOferty <= 0) {
		g_iOfertaSkrzynekGracza[id][iIdOferty][0] = 0;
	} else {
		g_iOfertaSkrzynekGracza[id][iIdOferty][1] = iIloscSkrzynekOferty;
	}

	OfertaWymiany(id);
	return PLUGIN_HANDLED;
}

public cmd_WpisalIloscKluczy(id) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_HANDLED;
	}

	new szIloscKluczy[16], iIloscKluczyOferty, iIloscKluczyGracza = csgo_get_user_keys(iTarget);
	
	read_argv(1, szIloscKluczy, 15);
	iIloscKluczyOferty = str_to_num(szIloscKluczy);

	if(iIloscKluczyOferty > iIloscKluczyGracza) {
		iIloscKluczyOferty = iIloscKluczyGracza;
	}

	if(iIloscKluczyOferty <= 0) {
		g_iOfertaKluczyGracza[id][iIdOferty] = 0;
	} else {
		g_iOfertaKluczyGracza[id][iIdOferty] = iIloscKluczyOferty;
	}

	OfertaWymiany(id);
	return PLUGIN_HANDLED;
}

public cmd_WpisalIloscEuro(id) {
	new iIdOferty = g_iIndexOstatniejOferty[id],
	iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return PLUGIN_HANDLED;
	}

	new szIloscEuro[16], iIloscEuroOferty, iIloscEuroGracza = csgo_get_user_euro(iTarget);
	
	read_argv(1, szIloscEuro, 15);
	if(szIloscEuro[0] == '0') {
		copy(szIloscEuro, 15, szIloscEuro[1]);
	}
	replace(szIloscEuro, 15, ".", "");

	iIloscEuroOferty = str_to_num(szIloscEuro);

	if(iIloscEuroOferty > iIloscEuroGracza) {
		iIloscEuroOferty = iIloscEuroGracza;
	}

	if(iIloscEuroOferty <= 0) {
		g_iOfertaEuroGracza[id][iIdOferty] = 0;
	} else {
		g_iOfertaEuroGracza[id][iIdOferty] = iIloscEuroOferty;
	}

	OfertaWymiany(id);
	return PLUGIN_HANDLED;
}
	
WybierzWymieniajacego(id) {
	new iMenu = menu_create("Wybierz gracza, z ktorym chcesz handlowac", "WybierzWymieniajacego_Handler");
	new szId[4], szNick[32];
	static iIloscSlotow;
	if(!iIloscSlotow) {
		iIloscSlotow = get_maxplayers();
	}
	
	for(new i = 1; i <= iIloscSlotow; i++) {
		if(!is_user_connected(i) || is_user_hltv(i) || !is_user_logged(i) || g_bBlokadaWymianyGracza[i] || i == id) {
			continue;
		}
		
		get_user_name(i, szNick, 31);
		num_to_str(i, szId, 3);
		menu_additem(iMenu, szNick, szId);
	}
	
	if(szId[0]) {
		menu_display(id, iMenu);
	}
	else {
		csgo_print_message(id, "Nie znaleziono zadnego gracza.");
	}
}

public WybierzWymieniajacego_Handler(id, iMenu, iItem) {
	if(iItem < 0) {
		if(iItem == MENU_EXIT) {
			menu_destroy(iMenu);
		}
		
		return PLUGIN_CONTINUE;
	}
	
	new szId[4], iAccess, iCb, iTarget;
	
	menu_item_getinfo(iMenu, iItem, iAccess, szId, 3, _, _, iCb);
	iTarget = str_to_num(szId);
	
	if(!is_user_connected(iTarget)) {
		csgo_print_message(id, "Nie znaleziono gracza.");
		return PLUGIN_CONTINUE;
	}
	
	g_iWymieniajacyGracza[id] = iTarget;
	
	for(new i = 0; i < 2; i++) {
		g_iOfertaSkinowGracza[id][i][0] = g_iOfertaSkinowGracza[id][i][1] = g_iOfertaSkinowGracza[id][i][2] = 0;
		g_iOfertaSkrzynekGracza[id][i][0] = g_iOfertaSkrzynekGracza[id][i][1] = 0;
		g_iOfertaKluczyGracza[id][i] = 0;
		g_iOfertaEuroGracza[id][i] = 0;
	}
	
	OfertaWymiany(id);
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public WyslijOferteWymiany(id) {
	new iTarget = g_iWymieniajacyGracza[id];
	
	if(!is_user_connected(iTarget)) {
		g_iWymieniajacyGracza[id] = 0;
		
		csgo_print_message(id, "Wymieniajacy/a rozlaczyl(a) sie z serwerem.");
		return;
	}
	
	new szMenu[512], szNick[32], szOferta[2][128];
	
	g_iOstatniOferujacyGracza[iTarget] = id;
	
	get_user_name(id, szNick, 31);
	PobierzOferteGracza(id, 0, szOferta[0], 127);
	PobierzOferteGracza(id, 1, szOferta[1], 127);
	formatex(szMenu, 511, "\wOferta wymiany od \y%s: \r%s^n\wOczekuje od Ciebie: \r%s^n^n\r7. \wZgadzam sie na wymiane^n\r8. Odrzuc oferte wymiany", szNick, szOferta[0], szOferta[1]);
	
	show_menu(iTarget, MENU_KEY_7|MENU_KEY_8, szMenu, -1, "PotwierdzOferteWymiany");
}

public PotwierdzOferteWymiany_Handler(id, iItem) {
	new iTarget = g_iOstatniOferujacyGracza[id];
	
	switch(iItem) {
		case 6: {
			if(!is_user_connected(iTarget)) {
				csgo_print_message(id, "Oferujacy/a wymiane rozlaczyl(a) sie z serwerem.");
			}
			else {
				if(!SprawdzOferte(iTarget, 0) || !SprawdzOferte(iTarget, 1)) {
					ZakonczOferteWymiany(iTarget, id, "Oferta wymiany anulowana - jeden z graczy nie posiadal oferowanych przedmiotow.");
				}
				else {
					PrzydzielOferty(iTarget, id);
					
					ZakonczOferteWymiany(iTarget, id, "Wymiana przebiegla pomyslnie!");
				}
			}
		}

		case 7: {
			ZakonczOferteWymiany(iTarget, id, "Oferta wymiany zostala odrzucona.");
		}
	}
}

ZakonczOferteWymiany(id, iTarget, const szPowod[]) {
	g_iWymieniajacyGracza[id] = 0;
	
	csgo_print_message(id, szPowod);
	csgo_print_message(iTarget, szPowod);
}

PobierzOferteGracza(id, iIdOferty, szOferta[], iLen) {
	new iLen2, iBron = g_iOfertaSkinowGracza[id][iIdOferty][0];

	if(iBron) {
		new szNazwaBroni[32], szNazwaSkina[32];
		csgo_get_short_weaponname(iBron, szNazwaBroni, 31);
		csgo_get_skin_name(iBron, g_iOfertaSkinowGracza[id][iIdOferty][1], szNazwaSkina, 31);

		iLen2 += formatex(szOferta[iLen2], iLen - iLen2, "%dx Skin %s - %s", g_iOfertaSkinowGracza[id][iIdOferty][2], szNazwaBroni, szNazwaSkina);
	}

	new iSkrzynka = g_iOfertaSkrzynekGracza[id][iIdOferty][0];
	if(iSkrzynka) {
		new szNazwaSkrzynki[32];
		csgo_get_crate_name(iSkrzynka, szNazwaSkrzynki, 31);

		if(iLen2) {
			iLen2 += formatex(szOferta[iLen2], iLen - iLen2, ", ");
		}

		iLen2 += formatex(szOferta[iLen2], iLen - iLen2, "%dx %s", g_iOfertaSkrzynekGracza[id][iIdOferty][1], szNazwaSkrzynki);
	}

	new iKlucze = g_iOfertaKluczyGracza[id][iIdOferty];
	if(iKlucze) {
		if(iLen2) {
			iLen2 += formatex(szOferta[iLen2], iLen - iLen2, ", ");
		}

		iLen2 += formatex(szOferta[iLen2], iLen - iLen2, "%dx Klucz do skrzynki", iKlucze);
	}


	new iEuro = g_iOfertaEuroGracza[id][iIdOferty];
	if(iEuro) {
		new szEuro[16];
		csgo_format_euro(iEuro, szEuro, 15);

		if(iLen2) {
			iLen2 += formatex(szOferta[iLen2], iLen - iLen2, ", ");
		}

		iLen2 += formatex(szOferta[iLen2], iLen - iLen2, "%s Euro", szEuro);
	}

	if(!iLen2) {
		copy(szOferta, iLen, "brak \d(kliknij, aby zmienic)");
	}
}

SprawdzOferte(id, iIdOferty) {
	new iTarget = (iIdOferty) ? g_iWymieniajacyGracza[id] : id;
	
	new iBron = g_iOfertaSkinowGracza[id][iIdOferty][0], iSkin = g_iOfertaSkinowGracza[id][iIdOferty][1];
	if(iBron && csgo_get_user_skins(iTarget, iBron, iSkin) < g_iOfertaSkinowGracza[id][iIdOferty][2]) {
		return 0;
	}

	new iSkrzynka = g_iOfertaSkrzynekGracza[id][iIdOferty][0];
	if(iSkrzynka && csgo_get_user_crates(iTarget, iSkrzynka) < g_iOfertaSkrzynekGracza[id][iIdOferty][1]) {
		return 0;
	}

	if(csgo_get_user_keys(iTarget) < g_iOfertaKluczyGracza[id][iIdOferty] || csgo_get_user_euro(iTarget) < g_iOfertaEuroGracza[id][iIdOferty]) {
		return 0;
	}

	return 1;
}

PrzydzielOferty(id, iTarget) {
	//new iIdCoDaje[2] = { id, iTarget };
	//new iIdCoDostaje[2] = { iTarget, id };

	#define IdCoDaje(%1) ((%1==0)?id:iTarget)
	#define IdCoDostaje(%1) ((%1==0)?iTarget:id)

	new iBron, iSkin, iSkrzynka, iIlosc;

	for(new i = 0; i < 2; i++) {
		iBron = g_iOfertaSkinowGracza[id][i][0];
		if(iBron) {
			iSkin = g_iOfertaSkinowGracza[id][i][1], iIlosc = g_iOfertaSkinowGracza[id][i][2];

			csgo_set_user_skins(IdCoDaje(i), iBron, iSkin, csgo_get_user_skins(IdCoDaje(i), iBron, iSkin) - iIlosc);
			csgo_set_user_skins(IdCoDostaje(i), iBron, iSkin, csgo_get_user_skins(IdCoDostaje(i), iBron, iSkin) + iIlosc);
		}

		iSkrzynka = g_iOfertaSkrzynekGracza[id][i][0];
		if(iSkrzynka) {
			iIlosc = g_iOfertaSkrzynekGracza[id][i][1];

			csgo_set_user_crates(IdCoDaje(i), iSkrzynka, csgo_get_user_crates(IdCoDaje(i), iSkrzynka) - iIlosc);
			csgo_set_user_crates(IdCoDostaje(i), iSkrzynka, csgo_get_user_crates(IdCoDostaje(i), iSkrzynka) + iIlosc);
		}

		if((iIlosc = g_iOfertaKluczyGracza[id][i])) {
			csgo_set_user_keys(IdCoDaje(i), csgo_get_user_keys(IdCoDaje(i)) - iIlosc);
			csgo_set_user_keys(IdCoDostaje(i), csgo_get_user_keys(IdCoDostaje(i)) + iIlosc);
		}

		if((iIlosc = g_iOfertaEuroGracza[id][i])) {
			csgo_set_user_euro(IdCoDaje(i), csgo_get_user_euro(IdCoDaje(i)) - iIlosc);
			csgo_set_user_euro(IdCoDostaje(i), csgo_get_user_euro(IdCoDostaje(i)) + iIlosc);
		}
	}
}
