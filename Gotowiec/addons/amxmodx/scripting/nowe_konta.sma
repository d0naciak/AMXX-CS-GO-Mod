/* Script generated by Pawn Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <hamsandwich>
#include <nvault>
#include <colorchat>

#define TASK_LOGOWANIE 444
#define TASK_MENUDRUZYN 555
#define TASK_ODRODZENIE 555

new bool:g_bHasloWpisane[33];
new g_iTryb[33];
new g_iOstatniTrybPrzyWejsciu[33];
new g_szOstatnioWpisaneHaslo[33][32];
new Float:g_fCzasRozpoczeciaRundy;

new g_pCvarWymuszajHaslo, g_pCvarInfoOSetInfo, g_pCvarPoJakimCzasieOdradzac;

public plugin_init()
{
	register_plugin("Nick na haslo", "1.0", "d0naciak.pl");
	
	g_pCvarWymuszajHaslo = register_cvar("accounts_forceregistering", "2");
	g_pCvarInfoOSetInfo = register_cvar("accounts_infoaboutsetinfo", "2");
	g_pCvarPoJakimCzasieOdradzac = register_cvar("accounts_timetorespawn", "10.0");

	register_concmd("acc_resetpassword", "cmd_UsunHaslo", ADMIN_IMMUNITY, "<nick>");
	register_concmd("acc_checkpassword", "cmd_SprawdzHaslo", ADMIN_IMMUNITY, "<nick>");

	register_message(get_user_msgid("VGUIMenu"), "msg_VGUIMenu");
	register_message(get_user_msgid("ShowMenu"), "msg_ShowMenu");

	register_clcmd("jointeam 6", "cmd_GotowyDoGry");
	register_clcmd("joinclass", "cmd_GotowyDoGry");
	register_menucmd(register_menuid("#Team_Select_Spect"), 51, "menu_WybralDruzyne");
	register_menucmd(register_menuid("#Terrorist_Select"), MENU_KEY_1|MENU_KEY_2|MENU_KEY_3|MENU_KEY_4|MENU_KEY_5, "menu_WybralStroj");
	register_menucmd(register_menuid("#CT_Select"), MENU_KEY_1|MENU_KEY_2|MENU_KEY_3|MENU_KEY_4|MENU_KEY_5, "menu_WybralStroj");
	register_clcmd("say", "cmd_Blokada");
	register_clcmd("say_team", "cmd_Blokada");
	register_clcmd("chooseteam", "cmd_WybierzTeam");
	register_clcmd("jointeam", "cmd_Blokada");

	register_event("TextMsg", "ev_PoczatekGry", "a", "2&#Game_C");
	register_event("HLTV", "ev_NowaRunda", "a", "1=0", "2=0");


	register_clcmd("say /konto", "cmd_Konto");
	register_clcmd("WpiszHaslo", "cmd_HasloWpisane");
	register_clcmd("UstawHaslo", "cmd_NoweHasloWpisane");
	register_clcmd("PowtorzHaslo", "cmd_NoweHasloPowtorzone");
	
	/*new iVault = nvault_open("Konta_donaciak");
	nvault_prune(iVault, 0, get_systime() - (86400 * 30));
	nvault_close(iVault);*/
}

public plugin_natives() {
	register_native("is_user_logged", "nat_CzyGraczJestZalogowany", 1);
}

public nat_CzyGraczJestZalogowany(id) {
	return _:g_bHasloWpisane[id];
}

public client_connect(id) {
	g_bHasloWpisane[id] = false;
	g_iTryb[id] = 0;
	g_iOstatniTrybPrzyWejsciu[id] = 0;
}

public client_authorized(id) {
	set_user_info(id, "_vgui_menus", "1");
}
/*
public client_infochanged(id) {
	new szVGUI[4];
	get_user_info(id, "_vgui_menus", szVGUI, 3);

	if(szVGUI[0] != '1') {
		set_user_info(id, "_vgui_menus", "1");
	}
}
*/
public client_disconnect(id) {
	remove_task(id);
	remove_task(id + TASK_LOGOWANIE);
	remove_task(id + TASK_MENUDRUZYN);
	remove_task(id + TASK_ODRODZENIE);
}

public msg_VGUIMenu(iMsgId, iMsgDest, id) {
	if(g_bHasloWpisane[id] || get_msg_arg_int(1) != 2) {
		return PLUGIN_CONTINUE;
	}
	
	CzyMaHaslo(id);
	return PLUGIN_HANDLED;
}

public msg_ShowMenu(iMsgId, iMsgDest, id) {
	if(g_bHasloWpisane[id]) {
		return PLUGIN_CONTINUE;
	}

	static szMenuText[256];
	get_msg_arg_string(4, szMenuText, 255);

	if(equal(szMenuText, "#Team_Select_Spect") || equal(szMenuText, "#Team_Select") || equal(szMenuText, "#IG_Team_Select") || equal(szMenuText, "#IG_Team_Select_Spect") || equal(szMenuText, "#Terrorist_Select") || equal(szMenuText, "#CT_Select")) {
		CzyMaHaslo(id);
		return PLUGIN_HANDLED;
	}

	return PLUGIN_CONTINUE;
}

bool:CzyMaHaslo(id)
{
	new iVault = nvault_open("Konta_donaciak");
	new szNick[32]; get_user_name(id, szNick, 31);
	new szHaslo[32], bool:bCzyMaHaslo = bool:nvault_get(iVault, szNick, szHaslo, 31);
	
	if(!bCzyMaHaslo) {
		nvault_close(iVault);
		
		if(get_pcvar_num(g_pCvarWymuszajHaslo) == 2) {
			g_iOstatniTrybPrzyWejsciu[id] = 1;

			Rejestracja(id, szNick);
			Display_Fade(id, 2, 2, 0x0004, 0, 0, 0, 255);
		} else {
			ZalogujGracza(id);
		}
	} else {
		
		nvault_touch(iVault, szNick);
		nvault_close(iVault);
		
		new szHasloInfo[32];
		get_user_info(id, "_pw", szHasloInfo, 31);

		if(equal(szHaslo, szHasloInfo)) {
			g_iOstatniTrybPrzyWejsciu[id] = 3;

			//ColorChat(id, GREEN, "[KONTO]^x01 Wczytano haslo z klienta gracza :)");
			ZalogujGracza(id);
		} else {
			g_iOstatniTrybPrzyWejsciu[id] = 2;

			Logowanie(id, szNick);
			Display_Fade(id, 2, 2, 0x0004, 0, 0, 0, 255);
		}
	}
}

Rejestracja(id, const szNick[32]) {
	new szItem[128], iDane[1];

	formatex(szItem, 127, "\wWitaj \y%s!^n\wJako iz na serwerze jestes po raz pierwszy^nmusisz zalozyc sobie haslo, a wiec?", szNick);
	new iMenu = menu_create(szItem, "Rejestracja_Handler");

	menu_additem(iMenu, "Przejdz do rejestracji");
	menu_additem(iMenu, "Opusc serwer");

	menu_setprop(iMenu, MPROP_EXIT, MEXIT_NEVER);
	iDane[0] = iMenu;

	g_iTryb[id] = 1;
	task_Logowanie(iDane, id + TASK_LOGOWANIE);
}


public task_Logowanie(iDane[1], iTaskId) {
	new id = iTaskId - TASK_LOGOWANIE, iMenu = iDane[0];

	if(!is_user_connected(id)) {
		menu_destroy(iMenu);
	} else {
		menu_display(id, iMenu);
		set_task(1.0, "task_Logowanie", iTaskId, iDane, 1);
	}
}

public Rejestracja_Handler(id, iMenu, iItem) {
	switch(iItem) {
		case 0: {
			remove_task(id + TASK_LOGOWANIE);
			menu_destroy(iMenu);

			client_cmd(id, "messagemode UstawHaslo");
			
			ColorChat(id, GREEN, "[KONTO]^x01 Wpisz teraz haslo, jakie chcesz ustawic.");
			ColorChat(id, GREEN, "[KONTO]^x01 Haslo moze posiadac maksymalnie^x03 32 znaki!");
			ColorChat(id, GREEN, "[KONTO]^x01 Uwaznie sprawdzaj co wpisujesz!");
			show_menu(id, 1023, " ", 1);
		}

		case 1: {
			server_cmd("kick #%d ^"Nie posiadasz konta!^"", get_user_userid(id));
		}
	}
}
	
public cmd_NoweHasloWpisane(id) {
	if(g_iTryb[id] != 1) {
		return PLUGIN_HANDLED;
	}

	read_argv(1, g_szOstatnioWpisaneHaslo[id], 31);
	trim(g_szOstatnioWpisaneHaslo[id]);
	
	if(strlen(g_szOstatnioWpisaneHaslo[id]) < 3) {
		client_cmd(id, "messagemode UstawHaslo");

		ColorChat(id, GREEN, "[KONTO]^x01 Haslo musi posiadac conajmniej 3 znaki.");
		return PLUGIN_HANDLED;
	}

	client_cmd(id, "messagemode PowtorzHaslo");
	
	for(new i = 0; i < 3; i++) {
		ColorChat(id, GREEN, "[KONTO]^x01 Wpisz haslo jeszcze raz.");
	}
	
	return PLUGIN_HANDLED;
}

public cmd_NoweHasloPowtorzone(id) {
	if(g_iTryb[id] != 1) {
		return PLUGIN_HANDLED;
	}

	new szHaslo[32];
	read_argv(1, szHaslo, 31);
	trim(szHaslo);

	if(equal(g_szOstatnioWpisaneHaslo[id], szHaslo)) {
		new iVault = nvault_open("Konta_donaciak"), szNick[32];
		get_user_name(id, szNick, 31);
		nvault_set(iVault, szNick, szHaslo);
		nvault_close(iVault);
		
		ColorChat(id, GREEN, "[KONTO]^x01 Wszystko przebieglo pomyslnie!");
		ColorChat(id, GREEN, "[KONTO]^x01 Twoje haslo to:^x03 %s", szHaslo);

		ZalogujGracza(id);
	} else {
		client_cmd(id, "messagemode UstawHaslo");

		ColorChat(id, GREEN, "[KONTO]^x01 Obydwa hasla nie zgadzaja sie! Sprobuj ponownie.");
	}
	
	return PLUGIN_HANDLED;
}

Logowanie(id, const szNick[32]) {
	new szItem[128], iDane[1];

	formatex(szItem, 127, "\wWitaj \y%s!^n\wNa twoim nicku zarezerwowano haslo, co dalej?", szNick);
	new iMenu = menu_create(szItem, "Logowanie_Handler");

	menu_additem(iMenu, "Przejdz do logowania");
	menu_additem(iMenu, "Opusc serwer");

	menu_setprop(iMenu, MPROP_EXIT, MEXIT_NEVER);
	iDane[0] = iMenu;

	g_iTryb[id] = 2;
	set_task(60.0, "task_Kick", id);
	task_Logowanie(iDane, id + TASK_LOGOWANIE);
}

public Logowanie_Handler(id, iMenu, iItem) {
	switch(iItem) {
		case 0: {
			remove_task(id + TASK_LOGOWANIE);
			menu_destroy(iMenu);

			client_cmd(id, "messagemode WpiszHaslo");
			
			ColorChat(id, GREEN, "[KONTO]^x01 Wpisz teraz haslo, jakie jest zarezerwowane na Twoim nicku.");
			show_menu(id, 1023, " ", 1);
		}

		case 1: {
			server_cmd("kick #%d ^"Nie znasz hasla!^"", get_user_userid(id));
		}
	}
}

public cmd_HasloWpisane(id) {
	if(g_bHasloWpisane[id] || g_iTryb[id] != 2) {
		return PLUGIN_HANDLED;
	}
	
	new iVault = nvault_open("Konta_donaciak");
	new szHasloWpisane[32], szHaslo[32], szNick[32];
	
	get_user_name(id, szNick, 31);
	read_argv(1, szHasloWpisane, 31);
	nvault_get(iVault, szNick, szHaslo, 31);
	nvault_close(iVault);
	
	if(!equal(szHaslo, szHasloWpisane)) {
		client_cmd(id, "messagemode WpiszHaslo");
		ColorChat(id, GREEN, "[KONTO]^x01 Wpisane haslo jest nieprawidlowe! Sprobuj ponownie...");
	} else {
		ColorChat(id, GREEN, "[KONTO]^x01 Wpisano poprawne haslo :)");
		ZalogujGracza(id);
	}
	
	return PLUGIN_HANDLED;
}

ZalogujGracza(id) {
	remove_task(id);

	if(!g_bHasloWpisane[id]) {
		if(g_iTryb[id] == 1) {
			set_task(3.0, "task_MenuDruzyn", id + TASK_MENUDRUZYN);
			ColorChat(id, GREEN, "[KONTO]^x01 Menu wyboru druzyny zostanie otwarte w ciagu 3 sekund...");
		} else {
			set_task(0.1, "task_MenuDruzyn", id + TASK_MENUDRUZYN);
		}
	}

	set_pdata_int(id, 365, 1);

	g_bHasloWpisane[id] = true;
	g_iTryb[id] = 0;
}

public task_MenuDruzyn(id) {
	client_cmd(id - TASK_MENUDRUZYN, "chooseteam");
}


public cmd_Blokada(id) {
	if(!g_bHasloWpisane[id]) {
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_CONTINUE;
}

public cmd_WybierzTeam(id) {
	if(!g_bHasloWpisane[id]) {
		return PLUGIN_HANDLED;
	}
	
	remove_task(id + TASK_MENUDRUZYN);
	return PLUGIN_CONTINUE;
}


public ev_PoczatekGry() {
	g_fCzasRozpoczeciaRundy = 4.0 + get_gametime(); //na oko, ale w miare ok jest xd
}

public ev_NowaRunda() {
	g_fCzasRozpoczeciaRundy = get_gametime();
}

public menu_WybralDruzyne(id, iItem) {
	if(iItem == 5) {
		cmd_GotowyDoGry(id);
	}
}

public menu_WybralStroj(id, iItem) {
	cmd_GotowyDoGry(id);
}

public cmd_GotowyDoGry(id) {
	if(!g_bHasloWpisane[id]) {
		return PLUGIN_HANDLED;
	}

	switch(g_iOstatniTrybPrzyWejsciu[id]) {
		case 0: {
			if(get_pcvar_num(g_pCvarWymuszajHaslo) == 1) {
					ColorChat(id, GREEN, "[KONTO]^x01 Zastrzez swoj nick, aby nikt poza Toba nie mogl na nim wejsc!");
					ColorChat(id, GREEN, "[KONTO]^x01 Uzyj komendy^x03 /konto^x01, aby zarezerwowac sobie haslo.");
			}
		}

		case 1: {
			if(get_pcvar_num(g_pCvarWymuszajHaslo)) {
				new iVault = nvault_open("Konta_donaciak");
				new szHaslo[32], szNick[32];
				
				get_user_name(id, szNick, 31);
				nvault_get(iVault, szNick, szHaslo, 31);
				nvault_close(iVault);

				ColorChat(id, GREEN, "[KONTO]^x01 Haslo normalnie nalezy wpisywac co mape, jednak nie musisz tego robic.");
				ColorChat(id, GREEN, "[KONTO]^x01 Wpisz w konsoli^x04 (pod ~):^x03 setinfo _pw ^"%s^"^x01, aby zapamietac haslo na komputerze.", szHaslo);
			}
		}

		case 2: {
			if(get_pcvar_num(g_pCvarInfoOSetInfo) == 2) {
				new iVault = nvault_open("Konta_donaciak");
				new szHaslo[32], szNick[32];
				
				get_user_name(id, szNick, 31);
				nvault_get(iVault, szNick, szHaslo, 31);
				nvault_close(iVault);

				ColorChat(id, GREEN, "[KONTO]^x01 Nie musisz wpisywac hasla co mape! ");
				ColorChat(id, GREEN, "[KONTO]^x01 Wpisz w konsoli^x04 (pod ~):^x03 setinfo _pw ^"%s^"^x01, aby zapamietac haslo na komputerze.", szHaslo);
			}
		}

		case 3: {
			ColorChat(id, GREEN, "[KONTO]^x01 Wczytano haslo przy pomocy komendy^x03 setinfo _pw^x01 :)");
		}
	}

	if(g_iOstatniTrybPrzyWejsciu[id] != -1) {
		if(1 <= g_iOstatniTrybPrzyWejsciu[id] <= 2) {
			Display_Fade(id, 1, 0, 0x0000, 0, 0, 0, 255);
		}
		
		if(get_gametime() <= (g_fCzasRozpoczeciaRundy+get_pcvar_float(g_pCvarPoJakimCzasieOdradzac))) {
			set_task(2.0, "task_Odrodzenie", id + TASK_ODRODZENIE);
		}
		
		g_iOstatniTrybPrzyWejsciu[id] = -1;
	}

	return PLUGIN_CONTINUE;
}

public task_Odrodzenie(id) {
	id -= TASK_ODRODZENIE;

	if(!is_user_connected(id) || is_user_alive(id) || !(1 <= get_user_team(id) <= 2)) {
		return PLUGIN_CONTINUE;
	}

	ExecuteHamB(Ham_CS_RoundRespawn, id);
	return PLUGIN_CONTINUE;
}

public cmd_Konto(id)
{
	if(!g_bHasloWpisane[id]) {
		return PLUGIN_HANDLED;
	}
	
	new iMenu = menu_create("System Rezerwacji Nicku^nby \rd0naciak", "Konto_Handler");
	
	menu_additem(iMenu, "Ustaw haslo na nicku");
	menu_additem(iMenu, "Informacje o haslach");
	
	menu_setprop(iMenu, MPROP_EXITNAME, "Wyjscie");

	menu_display(id, iMenu);

	
	return PLUGIN_HANDLED;
}

public Konto_Handler(id, iMenu, iItem)
{
	switch(iItem)
	{
		case 0: UstawHaslo(id);
		case 1: InfoHasla(id);
	}
	
	menu_destroy(iMenu);
}

UstawHaslo(id) {
	g_iTryb[id] = 1;

	client_cmd(id, "messagemode UstawHaslo");
			
	ColorChat(id, GREEN, "[KONTO]^x01 Wpisz teraz haslo, jakie chcesz ustawic.");
	ColorChat(id, GREEN, "[KONTO]^x01 Haslo moze posiadac maksymalnie^x03 32 znaki!");
	ColorChat(id, GREEN, "[KONTO]^x01 Uwaznie sprawdzaj co wpisujesz!");
}

InfoHasla(id)
	show_menu(id, 1023, "\wDzieki zalozeniu haslo na konto, ^n \
								mozesz byc pewny, ze nikt nie wlamie sie na twoj nick! ^n \
								Jezeli masz ustawione haslo na nick, co kazde wejscie na ^n \
								serwer, zostaniesz zapytany o haslo na nick, podanie ^n \
								blednego lub niepodanie hasla wcale, wyrzuci Cie z serwera.");
			

public task_Kick(id) {
	server_cmd("kick #%d ^"Nie wpisales hasla na czas!^"", get_user_userid(id));
}


public cmd_UsunHaslo(id, iLevel, iCId) {
	if(!cmd_access(id, iLevel, iCId, 2)) {
		return PLUGIN_HANDLED;
	}

	new iVault = nvault_open("Konta_donaciak");
	new szNick[32]; read_argv(1, szNick, 31);
	new szHaslo[2];

	if(nvault_get(iVault, szNick, szHaslo, 1)) {
		new iTarget = get_user_index(szNick);

		if(iTarget) {
			server_cmd("kick #%d ^"Twoje haslo zostalo zresetowane, wejdz ponownie^"", get_user_userid(iTarget));
			server_exec();
		}

		nvault_remove(iVault, szNick);

		console_print(id, "*** Pomyslnie usunieto haslo z nicku %s", szNick);
	} else {
		console_print(id, "*** Nie znaleziono gracza o nicku %s", szNick);
	}

	nvault_close(iVault);
	return PLUGIN_HANDLED;
}

public cmd_SprawdzHaslo(id, iLevel, iCId) {
	if(!cmd_access(id, iLevel, iCId, 2)) {
		return PLUGIN_HANDLED;
	}

	new iVault = nvault_open("Konta_donaciak");
	new szNick[32]; read_argv(1, szNick, 31);
	new szHaslo[32], iCzasZalozenia;

	if(nvault_lookup(iVault, szNick, szHaslo, 31, iCzasZalozenia)) {
		new szData[32];

		format_time(szData, 31, "%X - %x", iCzasZalozenia);

		console_print(id, "*** Nick: %s", szNick);
		console_print(id, "*** Haslo: %s", szHaslo);
		console_print(id, "*** Data zalozenia: %s", szData);
	} else {
		console_print(id, "*** Nie znaleziono gracza o nicku %s", szNick);
	}

	nvault_close(iVault);
	return PLUGIN_HANDLED;
}

stock Display_Fade(id,duration,holdtime,fadetype,red,green,blue,alpha)
{
    static msgScreenFade;

    if( !msgScreenFade ) msgScreenFade = get_user_msgid("ScreenFade")

    message_begin( !id ? MSG_ALL : MSG_ONE, msgScreenFade,{0,0,0},id );
    write_short( (1<<12) * duration );  // Duration of fadeout
    write_short( (1<<12) * holdtime );  // Hold time of color
    write_short( fadetype );    // Fade type
    write_byte ( red );         // Red
    write_byte ( green );       // Green
    write_byte ( blue );        // Blue
    write_byte ( alpha );       // Alpha
    message_end();
}
